/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PageViewService } from "../pageView.service";
import { PageViewCreateInput } from "./PageViewCreateInput";
import { PageView } from "./PageView";
import { PageViewFindManyArgs } from "./PageViewFindManyArgs";
import { PageViewWhereUniqueInput } from "./PageViewWhereUniqueInput";
import { PageViewUpdateInput } from "./PageViewUpdateInput";

export class PageViewControllerBase {
  constructor(protected readonly service: PageViewService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PageView })
  async createPageView(
    @common.Body() data: PageViewCreateInput
  ): Promise<PageView> {
    return await this.service.createPageView({
      data: data,
      select: {
        createdAt: true,
        id: true,
        timestamp: true,
        updatedAt: true,
        url: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PageView] })
  @ApiNestedQuery(PageViewFindManyArgs)
  async pageViews(@common.Req() request: Request): Promise<PageView[]> {
    const args = plainToClass(PageViewFindManyArgs, request.query);
    return this.service.pageViews({
      ...args,
      select: {
        createdAt: true,
        id: true,
        timestamp: true,
        updatedAt: true,
        url: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PageView })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async pageView(
    @common.Param() params: PageViewWhereUniqueInput
  ): Promise<PageView | null> {
    const result = await this.service.pageView({
      where: params,
      select: {
        createdAt: true,
        id: true,
        timestamp: true,
        updatedAt: true,
        url: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PageView })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePageView(
    @common.Param() params: PageViewWhereUniqueInput,
    @common.Body() data: PageViewUpdateInput
  ): Promise<PageView | null> {
    try {
      return await this.service.updatePageView({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          timestamp: true,
          updatedAt: true,
          url: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PageView })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePageView(
    @common.Param() params: PageViewWhereUniqueInput
  ): Promise<PageView | null> {
    try {
      return await this.service.deletePageView({
        where: params,
        select: {
          createdAt: true,
          id: true,
          timestamp: true,
          updatedAt: true,
          url: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
