/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PageView } from "./PageView";
import { PageViewCountArgs } from "./PageViewCountArgs";
import { PageViewFindManyArgs } from "./PageViewFindManyArgs";
import { PageViewFindUniqueArgs } from "./PageViewFindUniqueArgs";
import { CreatePageViewArgs } from "./CreatePageViewArgs";
import { UpdatePageViewArgs } from "./UpdatePageViewArgs";
import { DeletePageViewArgs } from "./DeletePageViewArgs";
import { PageViewService } from "../pageView.service";
@graphql.Resolver(() => PageView)
export class PageViewResolverBase {
  constructor(protected readonly service: PageViewService) {}

  async _pageViewsMeta(
    @graphql.Args() args: PageViewCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PageView])
  async pageViews(
    @graphql.Args() args: PageViewFindManyArgs
  ): Promise<PageView[]> {
    return this.service.pageViews(args);
  }

  @graphql.Query(() => PageView, { nullable: true })
  async pageView(
    @graphql.Args() args: PageViewFindUniqueArgs
  ): Promise<PageView | null> {
    const result = await this.service.pageView(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PageView)
  async createPageView(
    @graphql.Args() args: CreatePageViewArgs
  ): Promise<PageView> {
    return await this.service.createPageView({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PageView)
  async updatePageView(
    @graphql.Args() args: UpdatePageViewArgs
  ): Promise<PageView | null> {
    try {
      return await this.service.updatePageView({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PageView)
  async deletePageView(
    @graphql.Args() args: DeletePageViewArgs
  ): Promise<PageView | null> {
    try {
      return await this.service.deletePageView(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
